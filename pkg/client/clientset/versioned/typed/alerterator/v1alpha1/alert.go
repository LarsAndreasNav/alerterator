// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/nais/alerterator/pkg/apis/alerterator/v1alpha1"
	scheme "github.com/nais/alerterator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AlertsGetter has a method to return a AlertInterface.
// A group's client should implement this interface.
type AlertsGetter interface {
	Alerts() AlertInterface
}

// AlertInterface has methods to work with Alert resources.
type AlertInterface interface {
	Create(*v1alpha1.Alert) (*v1alpha1.Alert, error)
	Update(*v1alpha1.Alert) (*v1alpha1.Alert, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Alert, error)
	List(opts v1.ListOptions) (*v1alpha1.AlertList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Alert, err error)
	AlertExpansion
}

// alerts implements AlertInterface
type alerts struct {
	client rest.Interface
}

// newAlerts returns a Alerts
func newAlerts(c *AlerteratorV1alpha1Client) *alerts {
	return &alerts{
		client: c.RESTClient(),
	}
}

// Get takes name of the alert, and returns the corresponding alert object, and an error if there is any.
func (c *alerts) Get(name string, options v1.GetOptions) (result *v1alpha1.Alert, err error) {
	result = &v1alpha1.Alert{}
	err = c.client.Get().
		Resource("alerts").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Alerts that match those selectors.
func (c *alerts) List(opts v1.ListOptions) (result *v1alpha1.AlertList, err error) {
	result = &v1alpha1.AlertList{}
	err = c.client.Get().
		Resource("alerts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested alerts.
func (c *alerts) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("alerts").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a alert and creates it.  Returns the server's representation of the alert, and an error, if there is any.
func (c *alerts) Create(alert *v1alpha1.Alert) (result *v1alpha1.Alert, err error) {
	result = &v1alpha1.Alert{}
	err = c.client.Post().
		Resource("alerts").
		Body(alert).
		Do().
		Into(result)
	return
}

// Update takes the representation of a alert and updates it. Returns the server's representation of the alert, and an error, if there is any.
func (c *alerts) Update(alert *v1alpha1.Alert) (result *v1alpha1.Alert, err error) {
	result = &v1alpha1.Alert{}
	err = c.client.Put().
		Resource("alerts").
		Name(alert.Name).
		Body(alert).
		Do().
		Into(result)
	return
}

// Delete takes name of the alert and deletes it. Returns an error if one occurs.
func (c *alerts) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("alerts").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *alerts) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("alerts").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched alert.
func (c *alerts) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Alert, err error) {
	result = &v1alpha1.Alert{}
	err = c.client.Patch(pt).
		Resource("alerts").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
