// generated by your friendly code generator. DO NOT EDIT.
// to refresh this file, run `go generate` in your shell.

package updater

import (
	"fmt"

	"github.com/golang/glog"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes"
	typed_core_v1 "k8s.io/client-go/kubernetes/typed/core/v1"
)

func configMap(client typed_core_v1.ConfigMapInterface, old, new *corev1.ConfigMap) func() error {
	glog.Infof("creating or updating *corev1.ConfigMap for %s", new.Name)
	if old == nil {
		return func() error {
			_, err := client.Create(new)
			return err
		}
	}

	CopyMeta(old, new)

	return func() error {
		_, err := client.Update(new)
		return err
	}
}

func Updater(clientSet kubernetes.Interface, resource runtime.Object) func() error {
	switch new := resource.(type) {

	case *corev1.ConfigMap:
		c := clientSet.CoreV1().ConfigMaps(new.Namespace)
		old, err := c.Get(new.Name, metav1.GetOptions{})
		if err != nil {
			if !errors.IsNotFound(err) {
				return func() error { return err }
			}
			return configMap(c, nil, new)
		}
		return configMap(c, old, new)

	default:
		panic(fmt.Errorf("BUG! You didn't specify a case for type '%T' in the file hack/generator/updater.go", new))
	}
}
